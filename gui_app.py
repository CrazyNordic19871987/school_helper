import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import os
from datetime import datetime
from knowledge_base import get_topics_by_keywords, get_task_for_topic, get_topic_description
from student_progress import StudentProgress
from analytics import Analytics

class SchoolHelperApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üéì –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –®–∫–æ–ª—å–Ω–∏–∫–∞")
        self.root.geometry("900x700")
        self.root.configure(bg='#f0f8ff')
        
        # –°—Ç–∏–ª–∏
        self.style = ttk.Style()
        self.style.configure('TFrame', background='#f0f8ff')
        self.style.configure('TLabel', background='#f0f8ff', font=('Arial', 10))
        self.style.configure('Title.TLabel', background='#4CAF50', foreground='white', font=('Arial', 14, 'bold'))
        self.style.configure('Custom.TButton', font=('Arial', 10), background='#2196F3')
        
        self.setup_ui()
        self.current_student = None
        self.progress_manager = None
        self.analytics = None
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üéì –ò–ò-–ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –®–ö–û–õ–¨–ù–ò–ö–ê", 
                               style='Title.TLabel')
        title_label.pack(pady=(0, 20), fill=tk.X)
        
        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        name_frame = ttk.Frame(main_frame)
        name_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(name_frame, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", font=('Arial', 12, 'bold')).pack(side=tk.LEFT)
        self.name_entry = ttk.Entry(name_frame, font=('Arial', 12), width=20)
        self.name_entry.pack(side=tk.LEFT, padx=10)
        self.name_entry.bind('<Return>', lambda e: self.start_session())
        
        ttk.Button(name_frame, text="–ù–∞—á–∞—Ç—å", command=self.start_session, 
                  style='Custom.TButton').pack(side=tk.LEFT, padx=5)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã
        self.setup_analysis_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        self.setup_practice_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.setup_stats_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–ª–∞–Ω–∞ –∑–∞–Ω—è—Ç–∏–π
        self.setup_plan_tab()
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–æ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        self.disable_tabs()
    
    def setup_analysis_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã"""
        analysis_frame = ttk.Frame(self.notebook)
        self.notebook.add(analysis_frame, text="üìù –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã")
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞–±–æ—Ç—ã
        ttk.Label(analysis_frame, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã:", 
                 font=('Arial', 11, 'bold')).pack(anchor=tk.W, pady=(10, 5))
        
        self.work_text = scrolledtext.ScrolledText(analysis_frame, height=10, 
                                                  font=('Arial', 10), wrap=tk.WORD)
        self.work_text.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(analysis_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-—Ç–µ–∫—Å—Ç", 
                  command=self.load_demo_text).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", 
                  command=self.analyze_work, style='Custom.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_text).pack(side=tk.LEFT, padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ttk.Label(analysis_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:", 
                 font=('Arial', 11, 'bold')).pack(anchor=tk.W, pady=(20, 5))
        
        self.results_text = scrolledtext.ScrolledText(analysis_frame, height=8, 
                                                     font=('Arial', 10), wrap=tk.WORD,
                                                     state=tk.DISABLED)
        self.results_text.pack(fill=tk.BOTH, expand=True)
    
    def setup_practice_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        practice_frame = ttk.Frame(self.notebook)
        self.notebook.add(practice_frame, text="üìö –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
        
        # –°–ø–∏—Å–æ–∫ —Å–ª–∞–±—ã—Ö —Ç–µ–º
        ttk.Label(practice_frame, text="–°–ª–∞–±—ã–µ —Ç–µ–º—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", 
                 font=('Arial', 11, 'bold')).pack(anchor=tk.W, pady=(10, 5))
        
        self.topics_listbox = tk.Listbox(practice_frame, font=('Arial', 10), height=6)
        self.topics_listbox.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        topics_button_frame = ttk.Frame(practice_frame)
        topics_button_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(topics_button_frame, text="–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", 
                  command=self.select_topic).pack(side=tk.LEFT, padx=5)
        ttk.Button(topics_button_frame, text="–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", 
                  command=self.random_topic).pack(side=tk.LEFT, padx=5)
        ttk.Button(topics_button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.update_topics_list).pack(side=tk.LEFT, padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        ttk.Label(practice_frame, text="–ó–∞–¥–∞–Ω–∏–µ:", 
                 font=('Arial', 11, 'bold')).pack(anchor=tk.W, pady=(20, 5))
        
        self.task_text = scrolledtext.ScrolledText(practice_frame, height=6, 
                                                  font=('Arial', 10), wrap=tk.WORD,
                                                  state=tk.DISABLED)
        self.task_text.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        eval_frame = ttk.Frame(practice_frame)
        eval_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(eval_frame, text="–û—Ü–µ–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:", 
                 font=('Arial', 11, 'bold')).pack(side=tk.LEFT)
        
        self.eval_var = tk.StringVar(value="2")
        ttk.Radiobutton(eval_frame, text="‚úÖ –õ–µ–≥–∫–æ", variable=self.eval_var, 
                       value="1").pack(side=tk.LEFT, padx=10)
        ttk.Radiobutton(eval_frame, text="ü§î –¢—Ä—É–¥–Ω–æ", variable=self.eval_var, 
                       value="2").pack(side=tk.LEFT, padx=10)
        ttk.Radiobutton(eval_frame, text="‚ùå –ù–µ —Å–º–æ–≥", variable=self.eval_var, 
                       value="3").pack(side=tk.LEFT, padx=10)
        
        ttk.Button(eval_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", 
                  command=self.submit_evaluation).pack(side=tk.LEFT, padx=20)
    
    def setup_stats_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(stats_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_header = ttk.Label(stats_frame, text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                                font=('Arial', 12, 'bold'))
        stats_header.pack(pady=10)
        
        self.stats_text = scrolledtext.ScrolledText(stats_frame, height=12, 
                                                   font=('Arial', 10), wrap=tk.WORD,
                                                   state=tk.DISABLED)
        self.stats_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(stats_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                  command=self.update_stats).pack(pady=10)
    
    def setup_plan_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø–ª–∞–Ω–∞ –∑–∞–Ω—è—Ç–∏–π"""
        plan_frame = ttk.Frame(self.notebook)
        self.notebook.add(plan_frame, text="üéØ –ü–ª–∞–Ω –∑–∞–Ω—è—Ç–∏–π")
        
        ttk.Label(plan_frame, text="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é:", 
                 font=('Arial', 12, 'bold')).pack(pady=10)
        
        self.plan_text = scrolledtext.ScrolledText(plan_frame, height=15, 
                                                  font=('Arial', 10), wrap=tk.WORD,
                                                  state=tk.DISABLED)
        self.plan_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        ttk.Button(plan_frame, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω", 
                  command=self.generate_plan).pack(pady=10)
    
    def disable_tabs(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –¥–æ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        for i in range(1, 4):  # –í–∫–ª–∞–¥–∫–∏ 1, 2, 3 (–∏–Ω–¥–µ–∫—Å—ã 1, 2, 3)
            self.notebook.tab(i, state="disabled")
    
    def enable_tabs(self):
        """–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏"""
        for i in range(4):  # –í—Å–µ 4 –≤–∫–ª–∞–¥–∫–∏
            self.notebook.tab(i, state="normal")
    
    def start_session(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
        name = self.name_entry.get().strip()
        if not name:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!")
            return
        
        self.current_student = name
        self.progress_manager = StudentProgress(name)
        self.analytics = Analytics(self.progress_manager)
        
        # –í–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.enable_tabs()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.update_topics_list()
        self.update_stats()
        self.generate_plan()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞.")
    
    def load_demo_text(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        demo_text = """–í –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ —è –æ—à–∏–±—Å—è –≤ –∑–∞–¥–∞—á–µ –Ω–∞ –¥—Ä–æ–±–∏. 
–ù–µ —Å–º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥—Ä–æ–±—å 12/18, –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ –æ—Ç–≤–µ—Ç 6/9. 
–¢–∞–∫–∂–µ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞, –ø–µ—Ä–µ–ø—É—Ç–∞–ª —Ñ–æ—Ä–º—É–ª—É.
–í —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—à–∏–±–∞—é—Å—å –≤ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–∏ -—Ç—Å—è –∏ -—Ç—å—Å—è."""
        
        self.work_text.delete(1.0, tk.END)
        self.work_text.insert(1.0, demo_text)
    
    def clear_text(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è"""
        self.work_text.delete(1.0, tk.END)
        self.results_text.config(state=tk.NORMAL)
        self.results_text.delete(1.0, tk.END)
        self.results_text.config(state=tk.DISABLED)
    
    def analyze_work(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —É—á–µ–Ω–∏–∫–∞"""
        if not self.current_student:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!")
            return
        
        work_text = self.work_text.get(1.0, tk.END).strip()
        if not work_text:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—É
            success = self.progress_manager.save_student_work(work_text)
            if not success:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–æ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            found_topics = get_topics_by_keywords(work_text)
            recommended_tasks = {}
            
            for topic in found_topics:
                difficulty = self.progress_manager.progress_data["topics"].get(topic, {}).get("difficulty_level", "medium")
                task = get_task_for_topic(topic, difficulty)
                if task:
                    recommended_tasks[topic] = task
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            self.progress_manager.add_session(work_text, found_topics, recommended_tasks)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.show_results(found_topics, recommended_tasks)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏
            self.update_topics_list()
            self.update_stats()
            self.generate_plan()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    def show_results(self, found_topics, recommended_tasks):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        self.results_text.config(state=tk.NORMAL)
        self.results_text.delete(1.0, tk.END)
        
        if found_topics:
            self.results_text.insert(tk.END, "üîç –ù–ê–ô–î–ï–ù–´ –¢–ï–ú–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:\n\n")
            
            for topic in found_topics:
                self.results_text.insert(tk.END, f"üìñ {topic}\n")
                self.results_text.insert(tk.END, f"   –û–ø–∏—Å–∞–Ω–∏–µ: {get_topic_description(topic)}\n\n")
            
            self.results_text.insert(tk.END, "üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n")
            
            for topic, task in recommended_tasks.items():
                self.results_text.insert(tk.END, f"üìù {topic}:\n")
                self.results_text.insert(tk.END, f"   {task}\n\n")
        else:
            self.results_text.insert(tk.END, "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        
        self.results_text.config(state=tk.DISABLED)
    
    def update_topics_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–∞–±—ã—Ö —Ç–µ–º"""
        if not self.current_student:
            return
        
        self.topics_listbox.delete(0, tk.END)
        weak_topics = self.progress_manager.get_weak_topics()
        
        if not weak_topics:
            self.topics_listbox.insert(tk.END, "üéâ –ù–µ—Ç —Å–ª–∞–±—ã—Ö —Ç–µ–º –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return
        
        for topic in weak_topics:
            topic_data = self.progress_manager.progress_data["topics"][topic]
            display_text = f"{topic} (mastery: {topic_data['mastery_score']:.1f}%)"
            self.topics_listbox.insert(tk.END, display_text)
    
    def select_topic(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selection = self.topics_listbox.curselection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return
        
        weak_topics = self.progress_manager.get_weak_topics()
        if not weak_topics:
            return
        
        selected_topic = weak_topics[selection[0]]
        self.show_task(selected_topic)
    
    def random_topic(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        weak_topics = self.progress_manager.get_weak_topics()
        if not weak_topics:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–ª–∞–±—ã—Ö —Ç–µ–º –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return
        
        import random
        selected_topic = random.choice(weak_topics)
        self.show_task(selected_topic)
    
    def show_task(self, topic):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ"""
        difficulty = self.progress_manager.progress_data["topics"][topic]["difficulty_level"]
        task = get_task_for_topic(topic, difficulty)
        
        self.current_topic = topic
        
        self.task_text.config(state=tk.NORMAL)
        self.task_text.delete(1.0, tk.END)
        
        if task:
            self.task_text.insert(tk.END, f"üìñ –¢–µ–º–∞: {topic}\n")
            self.task_text.insert(tk.END, f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {get_topic_description(topic)}\n")
            self.task_text.insert(tk.END, f"üéØ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty}\n\n")
            self.task_text.insert(tk.END, "–ó–ê–î–ê–ù–ò–ï:\n")
            self.task_text.insert(tk.END, f"{task}")
        else:
            self.task_text.insert(tk.END, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        self.task_text.config(state=tk.DISABLED)
    
    def submit_evaluation(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        if not hasattr(self, 'current_topic'):
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ!")
            return
        
        rating = self.eval_var.get()
        if rating == "1":
            success_rate = 90
        elif rating == "2":
            success_rate = 60
        else:
            success_rate = 30
        
        self.progress_manager.update_mastery(self.current_topic, success_rate)
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", 
                          f"Mastery —Ç–µ–º—ã '{self.current_topic}' –æ–±–Ω–æ–≤–ª–µ–Ω: "
                          f"{self.progress_manager.progress_data['topics'][self.current_topic]['mastery_score']:.1f}%")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.update_topics_list()
        self.update_stats()
        self.generate_plan()
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.current_student:
            return
        
        weekly_report = self.analytics.get_weekly_report()
        stats = self.progress_manager.get_progress_summary()
        
        self.stats_text.config(state=tk.NORMAL)
        self.stats_text.delete(1.0, tk.END)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_text.insert(tk.END, "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n\n")
        self.stats_text.insert(tk.END, f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—Ç: {stats['total_works_analyzed']}\n")
        self.stats_text.insert(tk.END, f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {stats['topics_worked']}\n")
        self.stats_text.insert(tk.END, f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n\n")
        
        # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.stats_text.insert(tk.END, "üìÖ –û–¢–ß–ï–¢ –ó–ê –ù–ï–î–ï–õ–Æ:\n\n")
        self.stats_text.insert(tk.END, f"‚Ä¢ –°–µ—Å—Å–∏–π: {weekly_report['sessions_count']}\n")
        self.stats_text.insert(tk.END, f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º: {weekly_report['active_topics']}\n\n")
        
        if weekly_report['most_problematic_topics']:
            self.stats_text.insert(tk.END, "üìà –°–ê–ú–´–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–ú–´:\n\n")
            for topic, count in weekly_report['most_problematic_topics']:
                self.stats_text.insert(tk.END, f"‚Ä¢ {topic}: {count} —Ä–∞–∑(–∞)\n")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
        self.stats_text.insert(tk.END, "\nüéØ –ü–†–û–ì–†–ï–°–° –ü–û –¢–ï–ú–ê–ú:\n\n")
        for topic, data in self.progress_manager.progress_data["topics"].items():
            last_practiced = datetime.fromisoformat(data["last_practiced"]).strftime("%d.%m.%Y")
            self.stats_text.insert(tk.END, f"‚Ä¢ {topic}:\n")
            self.stats_text.insert(tk.END, f"  Mastery: {data['mastery_score']:.1f}%\n")
            self.stats_text.insert(tk.END, f"  –í—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å: {data['encounter_count']} —Ä–∞–∑\n")
            self.stats_text.insert(tk.END, f"  –£—Ä–æ–≤–µ–Ω—å: {data['difficulty_level']}\n\n")
        
        self.stats_text.config(state=tk.DISABLED)
    
    def generate_plan(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∑–∞–Ω—è—Ç–∏–π"""
        if not self.current_student:
            return
        
        weak_topics = self.progress_manager.get_weak_topics()
        
        self.plan_text.config(state=tk.NORMAL)
        self.plan_text.delete(1.0, tk.END)
        
        if not weak_topics:
            self.plan_text.insert(tk.END, "üéâ –£ –í–ê–° –ù–ï–¢ –°–õ–ê–ë–´–• –¢–ï–ú!\n\n")
            self.plan_text.insert(tk.END, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!\n\n")
            self.plan_text.insert(tk.END, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è:\n")
            self.plan_text.insert(tk.END, "1. –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n")
            self.plan_text.insert(tk.END, "2. –ü–æ–º–æ–≥–∞–π—Ç–µ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º\n")
            self.plan_text.insert(tk.END, "3. –ò–∑—É—á–∞–π—Ç–µ —Å–º–µ–∂–Ω—ã–µ —Ç–µ–º—ã")
        else:
            self.plan_text.insert(tk.END, "üìö –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –ù–ê –ù–ï–î–ï–õ–Æ:\n\n")
            
            days_plan = [
                "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", 
                "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            ]
            
            for i, day in enumerate(days_plan):
                if i < len(weak_topics):
                    topic = weak_topics[i]
                    mastery = self.progress_manager.progress_data["topics"][topic]["mastery_score"]
                    self.plan_text.insert(tk.END, f"üìÖ {day}: {topic}\n")
                    self.plan_text.insert(tk.END, f"   –¢–µ–∫—É—â–∏–π mastery: {mastery:.1f}%\n")
                    self.plan_text.insert(tk.END, f"   –¶–µ–ª—å: –ø–æ–≤—ã—Å–∏—Ç—å –¥–æ 80%\n\n")
                else:
                    self.plan_text.insert(tk.END, f"üìÖ {day}: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n\n")
            
            self.plan_text.insert(tk.END, f"üéØ –ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨ –ù–ï–î–ï–õ–ò:\n")
            self.plan_text.insert(tk.END, f"–ü–æ–≤—ã—Å–∏—Ç—å mastery —Ç–µ–º—ã '{weak_topics[0]}' –¥–æ 80%")
        
        self.plan_text.config(state=tk.DISABLED)

def main():
    root = tk.Tk()
    app = SchoolHelperApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()